<let> <id> f </id> <id> x </id> <id> n </id> <id> size </id> <id> M </id> 
   <match> <id> n </id>
          <pair> <vexp> 0 </vexp> <pexp gate = 'SKIP' > <id> x </id> <vexp> 0 </vexp> </pexp> </pair>
           <pair> <vexp op = '+' > <id> m </id> <vexp> 1 </vexp> </vexp> 
                  <app> <id> f </id> <id> x </id> <id> m </id> <id> size </id> <id> M </id> </app> 
               <if> <vexp op = '$' > <id> M </id> <id> m </id> </vexp>
                      <pexp gate = 'SR' > <vexp op = '-' > <id> size </id> <id> n </id> </vexp> <id> x </id> </pexp>
                      <pexp gate = 'SKIP' > <id> x </id> <id> m </id> </pexp>
               </if> 
           </pair>   
   </match>
</let>
<pexp gate = 'QFT' > <id> x </id> <vexp> 0 </vexp> </pexp> 
< app > <id> f </id> <id> x </id> <id> na </id> <id> na </id> <id> m </id> </app> 
<pexp gate = 'RQFT' > <id> x </id> </pexp>


//  Fixpoint f (x:var) (n:nat) (size:nat) (M: nat -> bool) :=
//  match n with 
//  | 0 => SKIP (x,0)
//  | S m => f x m size M ; if M m then SR (size - n) x else SKIP (x,m)
//  end.
//adder, adding natural number n to qubit array x
// main: QFT x 0; f x n size M; RQFT x
//x -> x + n, n
