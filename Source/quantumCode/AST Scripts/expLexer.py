# Generated from Exp.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,54,359,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,
        1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
        1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,
        1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,44,
        4,44,280,8,44,11,44,12,44,281,1,45,1,45,5,45,286,8,45,10,45,12,45,
        289,9,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,297,8,46,1,47,1,47,1,
        47,1,47,1,47,1,47,3,47,305,8,47,1,48,1,48,1,49,1,49,1,49,1,50,1,
        50,1,50,5,50,315,8,50,10,50,12,50,318,9,50,1,50,1,50,1,51,1,51,1,
        52,1,52,1,52,1,52,1,53,4,53,329,8,53,11,53,12,53,330,1,53,1,53,1,
        54,1,54,1,54,1,54,5,54,339,8,54,10,54,12,54,342,9,54,1,54,1,54,1,
        54,1,54,1,54,1,55,1,55,1,55,1,55,5,55,353,8,55,10,55,12,55,356,9,
        55,1,55,1,55,2,316,340,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,47,95,48,97,0,99,0,101,49,103,50,105,
        51,107,52,109,53,111,54,1,0,7,4,0,36,36,65,90,95,95,97,122,2,0,0,
        255,55296,56319,1,0,55296,56319,1,0,56320,57343,5,0,36,36,48,57,
        65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,12,13,32,32,367,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
        1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,1,113,1,0,0,0,
        3,115,1,0,0,0,5,117,1,0,0,0,7,119,1,0,0,0,9,121,1,0,0,0,11,123,1,
        0,0,0,13,125,1,0,0,0,15,127,1,0,0,0,17,129,1,0,0,0,19,134,1,0,0,
        0,21,139,1,0,0,0,23,143,1,0,0,0,25,147,1,0,0,0,27,151,1,0,0,0,29,
        154,1,0,0,0,31,161,1,0,0,0,33,165,1,0,0,0,35,172,1,0,0,0,37,179,
        1,0,0,0,39,182,1,0,0,0,41,186,1,0,0,0,43,190,1,0,0,0,45,195,1,0,
        0,0,47,200,1,0,0,0,49,206,1,0,0,0,51,208,1,0,0,0,53,210,1,0,0,0,
        55,212,1,0,0,0,57,215,1,0,0,0,59,218,1,0,0,0,61,223,1,0,0,0,63,225,
        1,0,0,0,65,228,1,0,0,0,67,231,1,0,0,0,69,235,1,0,0,0,71,238,1,0,
        0,0,73,242,1,0,0,0,75,249,1,0,0,0,77,256,1,0,0,0,79,260,1,0,0,0,
        81,264,1,0,0,0,83,269,1,0,0,0,85,271,1,0,0,0,87,276,1,0,0,0,89,279,
        1,0,0,0,91,283,1,0,0,0,93,296,1,0,0,0,95,304,1,0,0,0,97,306,1,0,
        0,0,99,308,1,0,0,0,101,311,1,0,0,0,103,321,1,0,0,0,105,323,1,0,0,
        0,107,328,1,0,0,0,109,334,1,0,0,0,111,348,1,0,0,0,113,114,5,40,0,
        0,114,2,1,0,0,0,115,116,5,44,0,0,116,4,1,0,0,0,117,118,5,41,0,0,
        118,6,1,0,0,0,119,120,5,45,0,0,120,8,1,0,0,0,121,122,5,43,0,0,122,
        10,1,0,0,0,123,124,5,42,0,0,124,12,1,0,0,0,125,126,5,47,0,0,126,
        14,1,0,0,0,127,128,5,58,0,0,128,16,1,0,0,0,129,130,5,98,0,0,130,
        131,5,111,0,0,131,132,5,111,0,0,132,133,5,108,0,0,133,18,1,0,0,0,
        134,135,5,117,0,0,135,136,5,110,0,0,136,137,5,105,0,0,137,138,5,
        116,0,0,138,20,1,0,0,0,139,140,5,110,0,0,140,141,5,117,0,0,141,142,
        5,109,0,0,142,22,1,0,0,0,143,144,5,82,0,0,144,145,5,101,0,0,145,
        146,5,102,0,0,146,24,1,0,0,0,147,148,5,83,0,0,148,149,5,116,0,0,
        149,150,5,114,0,0,150,26,1,0,0,0,151,152,5,45,0,0,152,153,5,62,0,
        0,153,28,1,0,0,0,154,155,5,100,0,0,155,156,5,101,0,0,156,157,5,102,
        0,0,157,158,5,105,0,0,158,159,5,110,0,0,159,160,5,101,0,0,160,30,
        1,0,0,0,161,162,5,108,0,0,162,163,5,101,0,0,163,164,5,116,0,0,164,
        32,1,0,0,0,165,166,5,108,0,0,166,167,5,101,0,0,167,168,5,116,0,0,
        168,169,5,114,0,0,169,170,5,101,0,0,170,171,5,99,0,0,171,34,1,0,
        0,0,172,173,5,108,0,0,173,174,5,97,0,0,174,175,5,109,0,0,175,176,
        5,98,0,0,176,177,5,100,0,0,177,178,5,97,0,0,178,36,1,0,0,0,179,180,
        5,105,0,0,180,181,5,102,0,0,181,38,1,0,0,0,182,183,5,99,0,0,183,
        184,5,97,0,0,184,185,5,114,0,0,185,40,1,0,0,0,186,187,5,99,0,0,187,
        188,5,100,0,0,188,189,5,114,0,0,189,42,1,0,0,0,190,191,5,99,0,0,
        191,192,5,111,0,0,192,193,5,110,0,0,193,194,5,115,0,0,194,44,1,0,
        0,0,195,196,5,108,0,0,196,197,5,105,0,0,197,198,5,115,0,0,198,199,
        5,116,0,0,199,46,1,0,0,0,200,201,5,110,0,0,201,202,5,117,0,0,202,
        203,5,108,0,0,203,204,5,108,0,0,204,205,5,63,0,0,205,48,1,0,0,0,
        206,207,5,60,0,0,207,50,1,0,0,0,208,209,5,61,0,0,209,52,1,0,0,0,
        210,211,5,62,0,0,211,54,1,0,0,0,212,213,5,35,0,0,213,214,5,116,0,
        0,214,56,1,0,0,0,215,216,5,35,0,0,216,217,5,102,0,0,217,58,1,0,0,
        0,218,219,5,83,0,0,219,220,5,75,0,0,220,221,5,73,0,0,221,222,5,80,
        0,0,222,60,1,0,0,0,223,224,5,88,0,0,224,62,1,0,0,0,225,226,5,67,
        0,0,226,227,5,85,0,0,227,64,1,0,0,0,228,229,5,82,0,0,229,230,5,90,
        0,0,230,66,1,0,0,0,231,232,5,82,0,0,232,233,5,82,0,0,233,234,5,90,
        0,0,234,68,1,0,0,0,235,236,5,83,0,0,236,237,5,82,0,0,237,70,1,0,
        0,0,238,239,5,83,0,0,239,240,5,82,0,0,240,241,5,82,0,0,241,72,1,
        0,0,0,242,243,5,76,0,0,243,244,5,115,0,0,244,245,5,104,0,0,245,246,
        5,105,0,0,246,247,5,102,0,0,247,248,5,116,0,0,248,74,1,0,0,0,249,
        250,5,82,0,0,250,251,5,115,0,0,251,252,5,104,0,0,252,253,5,105,0,
        0,253,254,5,102,0,0,254,255,5,116,0,0,255,76,1,0,0,0,256,257,5,82,
        0,0,257,258,5,101,0,0,258,259,5,118,0,0,259,78,1,0,0,0,260,261,5,
        81,0,0,261,262,5,70,0,0,262,263,5,84,0,0,263,80,1,0,0,0,264,265,
        5,82,0,0,265,266,5,81,0,0,266,267,5,70,0,0,267,268,5,84,0,0,268,
        82,1,0,0,0,269,270,5,59,0,0,270,84,1,0,0,0,271,272,5,115,0,0,272,
        273,5,101,0,0,273,274,5,108,0,0,274,275,5,102,0,0,275,86,1,0,0,0,
        276,277,5,46,0,0,277,88,1,0,0,0,278,280,3,97,48,0,279,278,1,0,0,
        0,280,281,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,90,1,0,0,0,
        283,287,3,93,46,0,284,286,3,95,47,0,285,284,1,0,0,0,286,289,1,0,
        0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,92,1,0,0,0,289,287,1,0,0,
        0,290,297,7,0,0,0,291,292,8,1,0,0,292,297,4,46,0,0,293,294,7,2,0,
        0,294,295,7,3,0,0,295,297,4,46,1,0,296,290,1,0,0,0,296,291,1,0,0,
        0,296,293,1,0,0,0,297,94,1,0,0,0,298,305,7,4,0,0,299,300,8,1,0,0,
        300,305,4,47,2,0,301,302,7,2,0,0,302,303,7,3,0,0,303,305,4,47,3,
        0,304,298,1,0,0,0,304,299,1,0,0,0,304,301,1,0,0,0,305,96,1,0,0,0,
        306,307,2,48,57,0,307,98,1,0,0,0,308,309,5,92,0,0,309,310,5,34,0,
        0,310,100,1,0,0,0,311,316,5,34,0,0,312,315,3,99,49,0,313,315,8,5,
        0,0,314,312,1,0,0,0,314,313,1,0,0,0,315,318,1,0,0,0,316,317,1,0,
        0,0,316,314,1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,320,5,34,
        0,0,320,102,1,0,0,0,321,322,5,64,0,0,322,104,1,0,0,0,323,324,5,46,
        0,0,324,325,5,46,0,0,325,326,5,46,0,0,326,106,1,0,0,0,327,329,7,
        6,0,0,328,327,1,0,0,0,329,330,1,0,0,0,330,328,1,0,0,0,330,331,1,
        0,0,0,331,332,1,0,0,0,332,333,6,53,0,0,333,108,1,0,0,0,334,335,5,
        47,0,0,335,336,5,42,0,0,336,340,1,0,0,0,337,339,9,0,0,0,338,337,
        1,0,0,0,339,342,1,0,0,0,340,341,1,0,0,0,340,338,1,0,0,0,341,343,
        1,0,0,0,342,340,1,0,0,0,343,344,5,42,0,0,344,345,5,47,0,0,345,346,
        1,0,0,0,346,347,6,54,0,0,347,110,1,0,0,0,348,349,5,47,0,0,349,350,
        5,47,0,0,350,354,1,0,0,0,351,353,8,5,0,0,352,351,1,0,0,0,353,356,
        1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,354,
        1,0,0,0,357,358,6,55,0,0,358,112,1,0,0,0,10,0,281,287,296,304,314,
        316,330,340,354,1,6,0,0
    ]

class ExpLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    Define = 15
    Let = 16
    Letrec = 17
    Lambda = 18
    If = 19
    Car = 20
    Cdr = 21
    Cons = 22
    List = 23
    Null = 24
    Less = 25
    Equal = 26
    Greater = 27
    TrueLiteral = 28
    FalseLiteral = 29
    SKIPEXP = 30
    Xgate = 31
    CU = 32
    RZ = 33
    RRZ = 34
    SR = 35
    SRR = 36
    Lshift = 37
    Rshift = 38
    Rev = 39
    QFT = 40
    RQFT = 41
    Seq = 42
    Self = 43
    Dot = 44
    Number = 45
    Identifier = 46
    Letter = 47
    LetterOrDigit = 48
    StrLiteral = 49
    AT = 50
    ELLIPSIS = 51
    WS = 52
    Comment = 53
    Line_Comment = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'-'", "'+'", "'*'", "'/'", "':'", "'bool'", 
            "'unit'", "'num'", "'Ref'", "'Str'", "'->'", "'define'", "'let'", 
            "'letrec'", "'lambda'", "'if'", "'car'", "'cdr'", "'cons'", 
            "'list'", "'null?'", "'<'", "'='", "'>'", "'#t'", "'#f'", "'SKIP'", 
            "'X'", "'CU'", "'RZ'", "'RRZ'", "'SR'", "'SRR'", "'Lshift'", 
            "'Rshift'", "'Rev'", "'QFT'", "'RQFT'", "';'", "'self'", "'.'", 
            "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>",
            "Define", "Let", "Letrec", "Lambda", "If", "Car", "Cdr", "Cons", 
            "List", "Null", "Less", "Equal", "Greater", "TrueLiteral", "FalseLiteral", 
            "SKIPEXP", "Xgate", "CU", "RZ", "RRZ", "SR", "SRR", "Lshift", 
            "Rshift", "Rev", "QFT", "RQFT", "Seq", "Self", "Dot", "Number", 
            "Identifier", "Letter", "LetterOrDigit", "StrLiteral", "AT", 
            "ELLIPSIS", "WS", "Comment", "Line_Comment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "Define", "Let", "Letrec", "Lambda", "If", "Car", "Cdr", 
                  "Cons", "List", "Null", "Less", "Equal", "Greater", "TrueLiteral", 
                  "FalseLiteral", "SKIPEXP", "Xgate", "CU", "RZ", "RRZ", 
                  "SR", "SRR", "Lshift", "Rshift", "Rev", "QFT", "RQFT", 
                  "Seq", "Self", "Dot", "Number", "Identifier", "Letter", 
                  "LetterOrDigit", "DIGIT", "ESCQUOTE", "StrLiteral", "AT", 
                  "ELLIPSIS", "WS", "Comment", "Line_Comment" ]

    grammarFileName = "Exp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[46] = self.Letter_sempred
            preds[47] = self.LetterOrDigit_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def Letter_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return Character.isJavaIdentifierStart(_input.LA(-1))
         

            if predIndex == 1:
                return Character.isJavaIdentifierStart(Character.toCodePoint((char)_input.LA(-2), (char)_input.LA(-1)))
         

    def LetterOrDigit_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 2:
                return Character.isJavaIdentifierPart(_input.LA(-1))
         

            if predIndex == 3:
                return Character.isJavaIdentifierPart(Character.toCodePoint((char)_input.LA(-2), (char)_input.LA(-1)))
         


